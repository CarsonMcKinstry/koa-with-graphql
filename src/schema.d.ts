/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  info: string;
  feed: GQLFeed;
  link?: GQLLink;
}

export enum GQLLinkOrderByInput {
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  description_ASC = 'description_ASC',
  description_DESC = 'description_DESC',
  url_ASC = 'url_ASC',
  url_DESC = 'url_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLFeed {
  links: Array<GQLLink>;
  count: number;
}

export interface GQLLink {
  id: string;
  createdAt: GQLDateTime;
  description: string;
  url: string;
  postedBy?: GQLUser;
  votes?: Array<GQLVote>;
}

export type GQLDateTime = any;

export interface GQLUser {
  id: string;
  name: string;
  email: string;
  links: Array<GQLLink>;
}

export interface GQLVoteWhereInput {
  random?: boolean;
  random_not?: boolean;
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  link?: GQLLinkWhereInput;
  user?: GQLUserWhereInput;
  AND?: Array<GQLVoteWhereInput>;
  OR?: Array<GQLVoteWhereInput>;
  NOT?: Array<GQLVoteWhereInput>;
}

export interface GQLLinkWhereInput {
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  createdAt?: GQLDateTime;
  createdAt_not?: GQLDateTime;
  createdAt_in?: Array<GQLDateTime>;
  createdAt_not_in?: Array<GQLDateTime>;
  createdAt_lt?: GQLDateTime;
  createdAt_lte?: GQLDateTime;
  createdAt_gt?: GQLDateTime;
  createdAt_gte?: GQLDateTime;
  description?: string;
  description_not?: string;
  description_in?: Array<string>;
  description_not_in?: Array<string>;
  description_lt?: string;
  description_lte?: string;
  description_gt?: string;
  description_gte?: string;
  description_contains?: string;
  description_not_contains?: string;
  description_starts_with?: string;
  description_not_starts_with?: string;
  description_ends_with?: string;
  description_not_ends_with?: string;
  url?: string;
  url_not?: string;
  url_in?: Array<string>;
  url_not_in?: Array<string>;
  url_lt?: string;
  url_lte?: string;
  url_gt?: string;
  url_gte?: string;
  url_contains?: string;
  url_not_contains?: string;
  url_starts_with?: string;
  url_not_starts_with?: string;
  url_ends_with?: string;
  url_not_ends_with?: string;
  postedBy?: GQLUserWhereInput;
  votes_every?: GQLVoteWhereInput;
  votes_some?: GQLVoteWhereInput;
  votes_none?: GQLVoteWhereInput;
  AND?: Array<GQLLinkWhereInput>;
  OR?: Array<GQLLinkWhereInput>;
  NOT?: Array<GQLLinkWhereInput>;
}

export interface GQLUserWhereInput {
  id?: string;
  id_not?: string;
  id_in?: Array<string>;
  id_not_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_gt?: string;
  id_gte?: string;
  id_contains?: string;
  id_not_contains?: string;
  id_starts_with?: string;
  id_not_starts_with?: string;
  id_ends_with?: string;
  id_not_ends_with?: string;
  name?: string;
  name_not?: string;
  name_in?: Array<string>;
  name_not_in?: Array<string>;
  name_lt?: string;
  name_lte?: string;
  name_gt?: string;
  name_gte?: string;
  name_contains?: string;
  name_not_contains?: string;
  name_starts_with?: string;
  name_not_starts_with?: string;
  name_ends_with?: string;
  name_not_ends_with?: string;
  email?: string;
  email_not?: string;
  email_in?: Array<string>;
  email_not_in?: Array<string>;
  email_lt?: string;
  email_lte?: string;
  email_gt?: string;
  email_gte?: string;
  email_contains?: string;
  email_not_contains?: string;
  email_starts_with?: string;
  email_not_starts_with?: string;
  email_ends_with?: string;
  email_not_ends_with?: string;
  password?: string;
  password_not?: string;
  password_in?: Array<string>;
  password_not_in?: Array<string>;
  password_lt?: string;
  password_lte?: string;
  password_gt?: string;
  password_gte?: string;
  password_contains?: string;
  password_not_contains?: string;
  password_starts_with?: string;
  password_not_starts_with?: string;
  password_ends_with?: string;
  password_not_ends_with?: string;
  links_every?: GQLLinkWhereInput;
  links_some?: GQLLinkWhereInput;
  links_none?: GQLLinkWhereInput;
  votes_every?: GQLVoteWhereInput;
  votes_some?: GQLVoteWhereInput;
  votes_none?: GQLVoteWhereInput;
  AND?: Array<GQLUserWhereInput>;
  OR?: Array<GQLUserWhereInput>;
  NOT?: Array<GQLUserWhereInput>;
}

export enum GQLVoteOrderByInput {
  random_ASC = 'random_ASC',
  random_DESC = 'random_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLVote {
  random?: boolean;
  id: string;
  link: GQLLink;
  user: GQLUser;
}

export interface GQLMutation {
  post: GQLLink;
  signup?: GQLAuthPayload;
  login?: GQLAuthPayload;
  vote?: GQLVote;
}

export interface GQLAuthPayload {
  token?: string;
  user?: GQLUser;
}

export interface GQLSubscription {
  newLink?: GQLLinkSubscriptionPayload;
  newVote?: GQLVoteSubscriptionPayload;
}

export interface GQLLinkSubscriptionPayload {
  mutation: GQLMutationType;
  node?: GQLLink;
  updatedFields?: Array<string>;
  previousValues?: GQLLinkPreviousValues;
}

export enum GQLMutationType {
  CREATED = 'CREATED',
  UPDATED = 'UPDATED',
  DELETED = 'DELETED'
}

export interface GQLLinkPreviousValues {
  id: string;
  createdAt: GQLDateTime;
  description: string;
  url: string;
}

export interface GQLVoteSubscriptionPayload {
  mutation: GQLMutationType;
  node?: GQLVote;
  updatedFields?: Array<string>;
  previousValues?: GQLVotePreviousValues;
}

export interface GQLVotePreviousValues {
  random?: boolean;
  id: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Feed?: GQLFeedTypeResolver;
  Link?: GQLLinkTypeResolver;
  DateTime?: GraphQLScalarType;
  User?: GQLUserTypeResolver;
  Vote?: GQLVoteTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  AuthPayload?: GQLAuthPayloadTypeResolver;
  Subscription?: GQLSubscriptionTypeResolver;
  LinkSubscriptionPayload?: GQLLinkSubscriptionPayloadTypeResolver;
  LinkPreviousValues?: GQLLinkPreviousValuesTypeResolver;
  VoteSubscriptionPayload?: GQLVoteSubscriptionPayloadTypeResolver;
  VotePreviousValues?: GQLVotePreviousValuesTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  info?: QueryToInfoResolver<TParent>;
  feed?: QueryToFeedResolver<TParent>;
  link?: QueryToLinkResolver<TParent>;
}

export interface QueryToInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFeedArgs {
  filter?: string;
  skip?: number;
  first?: number;
  orderBy?: GQLLinkOrderByInput;
}
export interface QueryToFeedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToFeedArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLinkArgs {
  id: string;
}
export interface QueryToLinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToLinkArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFeedTypeResolver<TParent = any> {
  links?: FeedToLinksResolver<TParent>;
  count?: FeedToCountResolver<TParent>;
}

export interface FeedToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FeedToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLinkTypeResolver<TParent = any> {
  id?: LinkToIdResolver<TParent>;
  createdAt?: LinkToCreatedAtResolver<TParent>;
  description?: LinkToDescriptionResolver<TParent>;
  url?: LinkToUrlResolver<TParent>;
  postedBy?: LinkToPostedByResolver<TParent>;
  votes?: LinkToVotesResolver<TParent>;
}

export interface LinkToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkToPostedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkToVotesArgs {
  where?: GQLVoteWhereInput;
  orderBy?: GQLVoteOrderByInput;
  skip?: number;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface LinkToVotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: LinkToVotesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  links?: UserToLinksResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVoteTypeResolver<TParent = any> {
  random?: VoteToRandomResolver<TParent>;
  id?: VoteToIdResolver<TParent>;
  link?: VoteToLinkResolver<TParent>;
  user?: VoteToUserResolver<TParent>;
}

export interface VoteToRandomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VoteToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VoteToLinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VoteToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  post?: MutationToPostResolver<TParent>;
  signup?: MutationToSignupResolver<TParent>;
  login?: MutationToLoginResolver<TParent>;
  vote?: MutationToVoteResolver<TParent>;
}

export interface MutationToPostArgs {
  url: string;
  description: string;
}
export interface MutationToPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSignupArgs {
  email: string;
  password: string;
  name: string;
}
export interface MutationToSignupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSignupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLoginArgs {
  email: string;
  password: string;
}
export interface MutationToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToVoteArgs {
  linkId: string;
}
export interface MutationToVoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToVoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthPayloadTypeResolver<TParent = any> {
  token?: AuthPayloadToTokenResolver<TParent>;
  user?: AuthPayloadToUserResolver<TParent>;
}

export interface AuthPayloadToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  newLink?: SubscriptionToNewLinkResolver<TParent>;
  newVote?: SubscriptionToNewVoteResolver<TParent>;
}

export interface SubscriptionToNewLinkResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToNewVoteResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface GQLLinkSubscriptionPayloadTypeResolver<TParent = any> {
  mutation?: LinkSubscriptionPayloadToMutationResolver<TParent>;
  node?: LinkSubscriptionPayloadToNodeResolver<TParent>;
  updatedFields?: LinkSubscriptionPayloadToUpdatedFieldsResolver<TParent>;
  previousValues?: LinkSubscriptionPayloadToPreviousValuesResolver<TParent>;
}

export interface LinkSubscriptionPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkSubscriptionPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkSubscriptionPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkSubscriptionPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLinkPreviousValuesTypeResolver<TParent = any> {
  id?: LinkPreviousValuesToIdResolver<TParent>;
  createdAt?: LinkPreviousValuesToCreatedAtResolver<TParent>;
  description?: LinkPreviousValuesToDescriptionResolver<TParent>;
  url?: LinkPreviousValuesToUrlResolver<TParent>;
}

export interface LinkPreviousValuesToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkPreviousValuesToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkPreviousValuesToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkPreviousValuesToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVoteSubscriptionPayloadTypeResolver<TParent = any> {
  mutation?: VoteSubscriptionPayloadToMutationResolver<TParent>;
  node?: VoteSubscriptionPayloadToNodeResolver<TParent>;
  updatedFields?: VoteSubscriptionPayloadToUpdatedFieldsResolver<TParent>;
  previousValues?: VoteSubscriptionPayloadToPreviousValuesResolver<TParent>;
}

export interface VoteSubscriptionPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VoteSubscriptionPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VoteSubscriptionPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VoteSubscriptionPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVotePreviousValuesTypeResolver<TParent = any> {
  random?: VotePreviousValuesToRandomResolver<TParent>;
  id?: VotePreviousValuesToIdResolver<TParent>;
}

export interface VotePreviousValuesToRandomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VotePreviousValuesToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
